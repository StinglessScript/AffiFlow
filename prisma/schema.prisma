generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  email         String          @unique
  name          String?
  image         String?
  password      String?
  role          UserRole        @default(USER)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  accounts      Account[]
  sessions      Session[]
  subscriptions Subscription[]
  workspaces    UserWorkspace[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Workspace {
  id             String          @id @default(cuid())
  name           String
  slug           String          @unique
  description    String?
  avatar         String?
  cover          String?
  domain         String?         @unique
  theme          Json?
  isActive       Boolean         @default(true)
  deletedAt      DateTime?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  affiliateLinks AffiliateLink[]
  categories     Category[]
  posts          Post[]
  products       Product[]
  users          UserWorkspace[]

  @@map("workspaces")
}

model UserWorkspace {
  id          String        @id @default(cuid())
  userId      String
  workspaceId String
  role        WorkspaceRole @default(MEMBER)
  createdAt   DateTime      @default(now())
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspace   Workspace     @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@unique([userId, workspaceId])
  @@map("user_workspaces")
}

model Post {
  id          String          @id @default(cuid())
  title       String
  content     String?
  excerpt     String?
  slug        String
  videoUrl    String?
  videoType   VideoType?
  thumbnail   String?
  isPublished Boolean         @default(false)
  publishedAt DateTime?
  deletedAt   DateTime?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  workspaceId String
  analytics   PostAnalytics[]
  products    PostProduct[]
  workspace   Workspace       @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@unique([workspaceId, slug])
  @@map("posts")
}

model Category {
  id          String    @id @default(cuid())
  name        String
  description String?
  color       String?
  workspaceId String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  products    Product[]

  @@map("categories")
}

model AffiliateLink {
  id               String    @id @default(cuid())
  name             String
  description      String?
  originalUrl      String
  affiliateUrl     String
  platform         String
  commission       Float?
  commissionType   String    @default("percentage")
  tags             String?
  productId        String
  workspaceId      String
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  product          Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  workspace        Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  activeForProduct Product?  @relation("ActiveAffiliateLink")

  @@map("affiliate_links")
}

model Product {
  id                    String          @id @default(cuid())
  name                  String
  description           String?
  image                 String?
  price                 Float?
  currency              String          @default("VND")
  activeAffiliateLinkId String?         @unique
  categoryId            String?
  workspaceId           String
  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt
  affiliateLinks        AffiliateLink[]
  posts                 PostProduct[]
  activeAffiliateLink   AffiliateLink?  @relation("ActiveAffiliateLink", fields: [activeAffiliateLinkId], references: [id])
  category              Category?       @relation(fields: [categoryId], references: [id])
  workspace             Workspace       @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@map("products")
}

model PostProduct {
  id        String   @id @default(cuid())
  postId    String
  productId String
  timestamp Int?
  position  Json?
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([postId, productId])
  @@map("post_products")
}

model PostAnalytics {
  id        String         @id @default(cuid())
  postId    String
  event     AnalyticsEvent
  metadata  Json?
  createdAt DateTime       @default(now())
  post      Post           @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@map("post_analytics")
}

model Subscription {
  id                   String             @id @default(cuid())
  userId               String
  plan                 SubscriptionPlan
  status               SubscriptionStatus
  currentPeriodStart   DateTime
  currentPeriodEnd     DateTime
  cancelAtPeriodEnd    Boolean            @default(false)
  stripeCustomerId     String?
  stripeSubscriptionId String?
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  user                 User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

enum UserRole {
  USER
  ADMIN
  SUPER_ADMIN
}

enum WorkspaceRole {
  OWNER
  ADMIN
  MEMBER
}

enum VideoType {
  YOUTUBE
  TIKTOK
  INSTAGRAM
}

enum AnalyticsEvent {
  VIEW
  PRODUCT_CLICK
  SHARE
  LIKE
}

enum SubscriptionPlan {
  FREE
  BASIC
  PRO
  ENTERPRISE
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  PAST_DUE
  UNPAID
}
